//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.09.28 at 10:32:25 AM MDT 
//


package com.jeppesen.gs.otsas.xml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for airportFunctionType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="airportFunctionType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="DepartureAirport"/>
 *     &lt;enumeration value="DepartureAlternateAirport"/>
 *     &lt;enumeration value="ArrivalAirport"/>
 *     &lt;enumeration value="PrimaryArrivalAlternateAirport"/>
 *     &lt;enumeration value="ArrivalAlternateAirport"/>
 *     &lt;enumeration value="ArrivalViaAlternateAirport"/>
 *     &lt;enumeration value="EnRouteAlternateAirport"/>
 *     &lt;enumeration value="ContingencySavingAirport"/>
 *     &lt;enumeration value="ContingencySavingEnRouteAlternateAirport"/>
 *     &lt;enumeration value="PrimaryContingencySavingAlternate"/>
 *     &lt;enumeration value="ContingencySavingAlternate"/>
 *     &lt;enumeration value="ETOPSAdequateAirport"/>
 *     &lt;enumeration value="ETOPSSuitableAirport"/>
 *     &lt;enumeration value="EscapeAirport"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "airportFunctionType")
@XmlEnum
public enum AirportFunctionType {

    @XmlEnumValue("DepartureAirport")
    DEPARTURE_AIRPORT("DepartureAirport"),
    @XmlEnumValue("DepartureAlternateAirport")
    DEPARTURE_ALTERNATE_AIRPORT("DepartureAlternateAirport"),
    @XmlEnumValue("ArrivalAirport")
    ARRIVAL_AIRPORT("ArrivalAirport"),
    @XmlEnumValue("PrimaryArrivalAlternateAirport")
    PRIMARY_ARRIVAL_ALTERNATE_AIRPORT("PrimaryArrivalAlternateAirport"),
    @XmlEnumValue("ArrivalAlternateAirport")
    ARRIVAL_ALTERNATE_AIRPORT("ArrivalAlternateAirport"),
    @XmlEnumValue("ArrivalViaAlternateAirport")
    ARRIVAL_VIA_ALTERNATE_AIRPORT("ArrivalViaAlternateAirport"),
    @XmlEnumValue("EnRouteAlternateAirport")
    EN_ROUTE_ALTERNATE_AIRPORT("EnRouteAlternateAirport"),
    @XmlEnumValue("ContingencySavingAirport")
    CONTINGENCY_SAVING_AIRPORT("ContingencySavingAirport"),
    @XmlEnumValue("ContingencySavingEnRouteAlternateAirport")
    CONTINGENCY_SAVING_EN_ROUTE_ALTERNATE_AIRPORT("ContingencySavingEnRouteAlternateAirport"),
    @XmlEnumValue("PrimaryContingencySavingAlternate")
    PRIMARY_CONTINGENCY_SAVING_ALTERNATE("PrimaryContingencySavingAlternate"),
    @XmlEnumValue("ContingencySavingAlternate")
    CONTINGENCY_SAVING_ALTERNATE("ContingencySavingAlternate"),
    @XmlEnumValue("ETOPSAdequateAirport")
    ETOPS_ADEQUATE_AIRPORT("ETOPSAdequateAirport"),
    @XmlEnumValue("ETOPSSuitableAirport")
    ETOPS_SUITABLE_AIRPORT("ETOPSSuitableAirport"),
    @XmlEnumValue("EscapeAirport")
    ESCAPE_AIRPORT("EscapeAirport");
    private final String value;

    AirportFunctionType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AirportFunctionType fromValue(String v) {
        for (AirportFunctionType c: AirportFunctionType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
